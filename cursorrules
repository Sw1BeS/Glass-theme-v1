 # CURSOR RULES - IS BEAUTY LUX SHOPIFY THEME

## ОСНОВНЫЕ ПРИНЦИПЫ

### 1. СТРУКТУРА СЕКЦИЙ
- ❌ НЕ создавать "секцию в секции" - это нарушает OS 2.0
- ✅ Использовать `blocks` для организации контента внутри секции
- ✅ Применять CSS Grid/Flexbox для макета вместо вложенных секций
- ✅ Максимум 2 уровня вложенности: секция → блоки

### 2. SCHEMA И РЕДАКТИРУЕМОСТЬ
- ✅ Каждый редактируемый элемент ДОЛЖЕН быть в `schema`
- ✅ Использовать осмысленные `id` в `kebab-case`
- ✅ Добавлять понятные `label` на английском
- ✅ Указывать `default` значения для всех полей
- ✅ Создавать `presets` для быстрого старта

### 3. НЕЙМИНГ
- **Секции:** `s-<purpose>(-<variant>).liquid`
  - Примеры: `s-hero.liquid`, `s-features-grid.liquid`, `s-testimonials-carousel.liquid`
- **Блоки:** `block_<purpose>`
  - Примеры: `block_heading`, `block_text`, `block_button`, `block_image`
- **ID:** `kebab-case` с префиксами
  - Примеры: `hero-heading`, `feature-icon`, `testimonial-author`
- **Labels:** Осмысленные названия
  - Примеры: "Hero Heading", "Feature Icon", "Testimonial Author"

### 4. ЛОКАЛИЗАЦИЯ
- ✅ Все тексты должны быть локализуемыми через `t:`
- ❌ НЕ использовать хардкод текстов в Liquid
- ✅ Создавать ключи в `locales/` файлах
- ✅ Использовать `{{ 'key' | t }}` для вывода текстов

### 5. ИЗОБРАЖЕНИЯ
- ✅ Только через настройки `image_picker`
- ✅ Добавлять `alt` текст в schema
- ✅ Указывать рекомендуемые размеры в `info`
- ❌ НЕ использовать хардкод путей к изображениям

### 6. CSS И СТИЛИ
- ✅ Использовать BEM методологию: `s-<section>__<element>--<modifier>`
- ✅ Применять CSS переменные для цветов и размеров
- ✅ Создавать мобильно-адаптивные стили
- ❌ НЕ создавать избыточные обертки

### 7. ОБРАТНАЯ СОВМЕСТИМОСТЬ
- ✅ Сначала `deprecated`, потом удаление
- ✅ Сохранять старые ID в `deprecated` секциях
- ✅ Создавать миграционные скрипты
- ✅ Тестировать на копии темы

### 8. ПРОЦЕСС РАЗРАБОТКИ
1. **Перед изменениями:**
   - Прочитать `AUDIT.md`
   - Изучить `THEME_NAMING.md`
   - Проверить `ERRORS.md`
   - Понять текущую структуру

2. **Во время разработки:**
   - Следовать принципам OS 2.0
   - Использовать `theme check` для валидации
   - Тестировать в Theme Editor
   - Документировать изменения

3. **После изменений:**
   - Запустить `theme check`
   - Обновить `presets`
   - Проверить в Theme Editor
   - Зафиксировать в `ERRORS.md` если есть проблемы

### 9. ФАЙЛОВАЯ СТРУКТУРА
```
sections/
├── s-hero.liquid              # Главный баннер
├── s-features-grid.liquid     # Сетка функций
├── s-testimonials.liquid      # Отзывы
└── s-cta.liquid              # Призыв к действию

blocks/
├── block-heading.liquid       # Заголовок
├── block-text.liquid          # Текст
├── block-button.liquid        # Кнопка
└── block-image.liquid         # Изображение

locales/
├── en.json                    # Английский
└── ru.json                    # Русский
```

### 10. КАЧЕСТВО КОДА
- ✅ Чистый, читаемый код
- ✅ Комментарии для сложной логики
- ✅ Консистентное форматирование
- ✅ Минимум оберток и дублирования
- ✅ Производительные запросы к данным

## ЗАПРЕЩЕНО
- ❌ Создавать секции внутри секций
- ❌ Хардкодить тексты и изображения
- ❌ Использовать неконсистентное именование
- ❌ Ломать существующие шаблоны без deprecation
- ❌ Создавать избыточные CSS/JS файлы

## РЕКОМЕНДУЕТСЯ
- ✅ Следовать принципам OS 2.0
- ✅ Использовать официальную документацию Shopify
- ✅ Тестировать изменения в Theme Editor
- ✅ Документировать все изменения
- ✅ Поддерживать обратную совместимость

## ИСТОЧНИКИ И ВЕБ-ПОИСК
Всегда использовать веб-поиск. Приоритет: 1) shopify.dev 2) Dawn (официальные темы, GitHub) 3) Shopify Community 4) GitHub Issues/PRs 5) Stack Overflow.
Для каждого найденного решения считать EVIDENCE_SCORE (0..100):
- Freshness 0–30 (≤6 мес = 30; 6–18 = 20–28; >36 = ≤8)
- Authority 0–30 (shopify.dev=30; Dawn/офиц. GH=28–30; SO c accepted=22–26)
- Engagement 0–20 (апвоуты/принятый ответ/комменты без нерешённых жалоб)
- Reproducibility 0–10 (шаги, diff, код)
- Compatibility 0–10 (OS 2.0, Shopify CLI v3+)
Вести таблицу `SOURCES.md` и ссылаться на неё в отчётах и ERRORS.md.

## ОГРАНИЧЕНИЯ (SCOPE GUARD)
Запрещено менять: `config/settings_data.json`, шаблоны продуктов/коллекций, медиа-ассеты. Все правки — только для главной и её секций. После любых правок главной обновлять `presets`.

## ПРОЦЕСС
Перед изменениями читать: `AUDIT.md`, `THEME_NAMING.md`, `ERRORS.md`. После — запуск `theme-check --fail-level error`. Любую проблему логировать в `ERRORS.md` (дата, симптом, причина, решение, проверка, ссылки на `SOURCES.md`).

